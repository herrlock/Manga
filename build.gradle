plugins {
	id 'org.ajoberstar.grgit' version '3.1.1'
	id 'com.github.spotbugs' version '1.6.9'
}

apply plugin: 'distribution'

description = 'The root-project. Contains the subprojects'

// general setup
allprojects {

	group 'de.herrlock.manga'
	version '1.5.0-BETA-SNAPSHOT'

	apply plugin: 'eclipse'

	eclipse {
		project {
			if(rootProject.hasProperty('eclipseNamePrefix')) {
				name = rootProject.eclipseNamePrefix + '-' + project.name
			}
		}
	}
}

subprojects {
	
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'com.github.spotbugs'
	apply plugin: 'pmd'
	apply plugin: 'jacoco'
	apply plugin: 'project-report'
	apply plugin: 'build-dashboard'
	
	sourceCompatibility = '1.8'
	
	dependencies {
		// compile-annotations
		compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.12'
		
		// for testing
		testImplementation 'junit:junit:4.12'
	}
	
	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
		if(project.hasProperty('jre8bootstrap')) {
			options.bootstrapClasspath = files("$jre8bootstrap/rt.jar")
		}
		// options.javaHome = 
	}
	
	jar.manifest {
		attributes 'Built-At' : new Date(),
			'Built-With' : org.gradle.util.GradleVersion.current(),
			'Created-By' : "${System.properties.'java.runtime.version'} (${System.properties.'java.vm.vendor'})",
			'Version' : project.version,
			'Info'
		attributes 'Branch' : grgit.branch.getCurrent().getName(),
			'Commit' : grgit.head().getId(),
			'Date' : grgit.head().getDate(),
			'Git'
	}
	
	spotbugs {
		effort = 'max'
		reportLevel = 'low'
	}
	
	pmd {
		toolVersion = '6.8.0'
		ruleSets = []
		ruleSetFiles = files("${rootProject.projectDir}/misc/pmd.rulesets.xml")
	}
	
	eclipse {
		project {
			buildCommand 'edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder'
		}
	}
	
	task sourceJar(type: Jar) {
		from sourceSets.main.allJava
		classifier 'sources'
	}
	assemble.dependsOn sourceJar
	
	/*
	task javadocJar(type: Jar, dependsOn: javadoc) {
		from tasks.javadoc.outputs
		classifier 'javadoc'
	}
	assemble.dependsOn javadocJar
	*/
	
	repositories {
		mavenCentral()
	}
}

// evaluate subprojects
project.evaluationDependsOnChildren()

// configure root-project

task dist(dependsOn: [assembleDist], group: 'Distribution', description: 'Run distZip and distTar') {
	// does nothing itself
}

task packDependencies {
	subprojects.each {
		dependsOn it.jar
	}

	File targetFolder = new File(rootProject.buildDir, 'tmp/packJars/')
	doLast {
		targetFolder.mkdirs()
	}
	java.util.jar.Pack200.Packer packer = java.util.jar.Pack200.newPacker();
	// pack with low compression rate, when is is requested or a name-prefix is present; the latter always indicates a development-version
	boolean lowEffortPacking = project.hasProperty('lep') || project.hasProperty('lowEffortPacking') || project.hasProperty('eclipseNamePrefix')
	packer.properties().putAll([
		(packer.EFFORT) : lowEffortPacking ? '0' : '9',
		(packer.SEGMENT_LIMIT) : '-1',
		(packer.KEEP_FILE_ORDER) : packer.FALSE,
		(packer.MODIFICATION_TIME) : packer.LATEST,
		(packer.DEFLATE_HINT) : packer.TRUE,
		(packer.UNKNOWN_ATTRIBUTE) : packer.ERROR
	])
	if(project.hasProperty('stripLNT')) {
		packer.properties().put(packer.CODE_ATTRIBUTE_PFX + 'LineNumberTable', packer.STRIP)
	}
	project(':MangaLauncher').configurations.runtimeClasspath.each { jar ->
		if(!'jfxrt.jar'.equals(jar.getName())) {
			inputs.file jar
			File newFile = new File(targetFolder, jar.getName() + '.pack.gz')
			outputs.file newFile
			doLast {
				new java.util.jar.JarInputStream( new FileInputStream(jar) ).withStream { jarIn ->
					new java.util.zip.GZIPOutputStream( newFile.newOutputStream() ).withStream { gzOut ->
						logger.info "Packing to ${newFile}"
						packer.pack( jarIn, gzOut );
					}
				}
			}
		}
	}
}

distributions {
	main {
		baseName = project.name
		contents {
			from 'LICENSE'
			from (project(':MangaLauncher').tasks.jar) {
				rename '.+', 'MangaLauncher.jar'
			}
			into ('licenses') {
				from 'licenses'
			}
			into('lib') {
				from packDependencies
			}
			filesMatching ('MangaLauncher.sh') {
				it.setMode 0744
			}
		}
	}
}

tasks.withType(Tar) {
	compression = Compression.GZIP
}

void assertPmdErrors(Task pmdTask, List expected) {
	assertPmdErrors pmdTask.reports.xml.destination, expected
}

void assertPmdErrors(File file, List expected) {
	def violations = new XmlSlurper().parse(file).file.violation
	assert violations.size() == expected.size(), 
		"Wrong number of PMD warnings: Expected ${expected.size()} violations but found ${violations.size()}. See the report at: ${file.toURI()}"
	violations.eachWithIndex { element,index ->
		def exp = expected.get(index)
		assert "${element.@package}.${element.@class}" == exp.clazz, "Wrong class. Is ${element.@package}.${element.@class} but should be ${exp.clazz}"
		assert element.@method == exp.method, "Wrong method. Is ${element.@method} but should be ${exp.method}"
		assert element.@rule == exp.rule, "Wrong PMD rule. Is ${element.@rule} but should be ${exp.rule}"
	}
	println 'Suppressing PMD warnings, as they seem to be expected.'
}
